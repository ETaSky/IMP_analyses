apply(x, 1, p.adjust, n=118)
lapply(x, p.adjust, n=118)
unlist(lapply(x, p.adjust, n=118))
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <- c(0.99027,0.01113,0.4947,0.00593,0.68112,2.00E-16)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <- c(0.762751,0.014663,0.934182,0.110733,0.6797,0.000474)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.99027,0.01113,0.4947,0.00593,0.68112,0.11016)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.0151,0.2543,0.5273,0.1373,0.6461)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.24,0.982,0.711,0.135,0.252)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(00.23701,0.00406,0.5826,0.17664,0.35576)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.7822,0.00425,0.49998,0.00642,0.83877)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.62879,0.24398,0.85792,0.56728,0.17594,0.00197,0.34862)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.595889,0.057916,0.783039,0.699298,0.195882,0.000785,0.905865)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.422,0.103,0.596,0.188,0.281,0.445,0.434)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.859907,0.019876,0.927471,0.210074,0.912991,0.033952,0.000183)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.39105,0.00896,0.56906,0.85463,0.82854,0.00265,0.6415)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.842973,0.191493,0.899186,0.697909,0.624673,0.000883,0.100037)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.6204,0.0262,0.8081,0.2157,0.5274)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.5176,0.0166,0.8463,0.1508,0.3899)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.685,0.0109,0.6065,0.1982,0.3044)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.83045,0.000583,0.629129,0.593527,0.735863)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.93858,0.00515,0.83757,0.49479,0.92551)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <- rep(0.0147, 119)
p.adjust(x, method="fdr")
x
x <- cbind(c(1,1,1), c(2,2,2))
x
colMeans(x)
x <- cbind(c(1,1,1), c(2,2,2))
x
rownames(x) <- c("a","b","c")
rownames(x)[which(x[,1] %in% c(1,2))]
rownames(x)[x[,1] %in% c(1,2)]
x[,1] %in% c(1,2)
?rank
library(beeswarm)
beeswarm(x=-log10(rep(1:10)), main="Alpha Diversity",#
			ylab="Effect Size", pwpch=rep(23,length(unlist(cols))), pwcol=unlist(cols), pwbg=unlist(cols))#
legend("topright", legend = c("Yes", "No"), pch = pch , col = 1:2)
beeswarm(x=(rep(1:10)), main="Alpha Diversity",#
			ylab="Effect Size", pwpch=rep(23,length(unlist(cols))), pwcol=unlist(cols), pwbg=unlist(cols))#
legend("topright", legend = c("Yes", "No"), pch = pch , col = 1:2)
beeswarm(x=(rep(1:10)), main="Alpha Diversity")
line(1)
abline(h=2)
beeswarm(x=(rep(1:10)), main="Alpha Diversity")
abline(h=2, lty=2)
?wilcox.test
?lm
test <- cbind(1:2,1:2)
rownames(test) <- "#S"
rownames(test) <- c("#S", "1")
test
?abline
x <- 1 > 3
x
x <- 5 > 3
x
class(x)
pwr.anova.test()
library(pwr)
?pwr.anova.test()
pwr.anova.test(2, f=-0.0334525, sig.level=0.05, power=.80)
pwr.anova.test(2, f=0.0334525, sig.level=0.05, power=.80)
pwr.anova.test(2, f=0.1555, sig.level=0.05, power=.80)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.1554/.0107)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.03345/.00928)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=..03/.001)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=..03/.003)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.03/.003)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.007/.001)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.145/.02)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.001746/.0002)
.03345/.00928
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/lib/convert.to.relative.abundance.r")
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/convert.to.relative.abundance.r")
convert.to.relative.abundance("merged_otutable_s2_3000.txt", "test.txt")
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/convert.to.relative.abundance.r")
convert.to.relative.abundance("merged_otutable_s2_3000.txt", "test.txt")
otufile = "merged_otutable_s2_3000.txt"; outputfile = "test.txt"
fnlength <- nchar(otufile)	if(substr(otufile, fnlength-4, fnlength) == ".biom") {		otu0 <- as.matrix(biom_data(read_biom(otufile)))	} else {		line1 <-readLines(otufile,n=1)		if(line1=="# Constructed from biom file") {			otu0 <-read.table(otufile,sep='\t',head=T,row=1,comment='',quote="",skip=1)		} else {			otu0 <-read.table(otufile,sep='\t',head=T,row=1,comment='',quote="")		}	}	taxonomy <- otu0$taxonomy
head(taxonomy)
otu0[1,]
otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')
otu[1,]
otu <- t(otu)
otu[1,]
otu[1:5,1]
dim(otu)
dim(otu0)
length(taxonomy)
otu[,"taxonomy"] <- taxonomy
taxonomy
class(otu)
otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')#
    otu <- t(otu)
otu_df <- as.data.frame(otu)
otu_df[1:5,1]
otu_df[1:5,1:2]
otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')#
    otu <- as.data.frame(t(otu))#
    otu[,"taxonomy"] <- taxonomy
otu_df[1:5,1:2]
otu[1:5,1:2]
otu[1:100,1:2]
min(otu)
otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')#
    otu <- as.data.frame(t(otu))
min(otu)
min(otu[otu != 0])
decimalplaces <- function(x) {    if ((x %% 1) != 0) {        nchar(strsplit(sub('0+$', '', as.character(x)), ".", fixed=TRUE)[[1]][[2]])    } else {        return(0)    }}
decimalplaces(min(otu[otu != 0]))
otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')    prevalences <- apply(otu, 2, function(bug.col) mean(bug.col > 0))    otu <- otu[, prevalences >= .10]#
    min(otu[otu != 0])
sort(otu[otu != 0])
min(otu[otu != 0])
min(otu[otu != 0])*10^18
min(otu[otu != 0])*10^13
min(otu[otu != 0])*10^6
?signif
trunc(min(otu[otu != 0]))
x <- min(otu[otu != 0])
1-x
x
decimalplaces(1-x)
1%%x
x%%1
as.character(x0)
as.character(x)
attr(regexpr("(?<=\\.)0+", x, perl = TRUE), "match.length")
x
zeros_after_period <- function(x) {if (isTRUE(all.equal(round(x),x))) return (0) # y would be -Inf for integer valuesy <- log10(abs(x)-floor(abs(x)))   ifelse(isTRUE(all.equal(round(y),y)), -y-1, -ceiling(y))} # corrects case ending with ..01
zeros_after_period(x)
x*10^5
x*10^(5+2)
?exp
taxonomy <- otu0$taxonomy#
	otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')    prevalences <- apply(otu, 2, function(bug.col) mean(bug.col > 0))    otu <- otu[, prevalences >= .10]    # turn all rel abundances to abs counts based on the smallest rel abundance value    x <- min(otu[otu!=0])        otu <- otu*10^(zeros_after_period(x) + 2)#
    otu <- as.data.frame(t(otu))#
    otu[,"taxonomy"] <- taxonomy
otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')    prevalences <- apply(otu, 2, function(bug.col) mean(bug.col > 0))    otu <- otu[, prevalences >= .10]
x <- min(otu[otu!=0])
zeros_after_period(x) + 2
10^(zeros_after_period(x) + 2)
otu1 <- otu*10^(zeros_after_period(x) + 2)
dim(otu1)
dim(otu)
otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')    prevalences <- apply(otu, 2, function(bug.col) mean(bug.col > 0))    otu <- otu[, prevalences >= .10]    # turn all rel abundances to abs counts based on the smallest rel abundance value    x <- min(otu[otu!=0])        otu <- otu*10^(zeros_after_period(x) + 2)#
    otu <- as.data.frame(t(otu))
otu[1:5,1:5]
dim(otu)
length(taxonomy)
taxonomy <- otu0$taxonomy
length(taxonomy)
fnlength <- nchar(otufile)	if(substr(otufile, fnlength-4, fnlength) == ".biom") {		otu0 <- as.matrix(biom_data(read_biom(otufile)))	} else {		line1 <-readLines(otufile,n=1)		if(line1=="# Constructed from biom file") {			otu0 <-read.table(otufile,sep='\t',head=T,row=1,comment='',quote="",skip=1)		} else {			otu0 <-read.table(otufile,sep='\t',head=T,row=1,comment='',quote="")		}	}	taxonomy <- otu0$taxonomy    names(taxonomy) <- rownames(otu0)#
	otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')    prevalences <- apply(otu, 2, function(bug.col) mean(bug.col > 0))    otu <- otu[, prevalences >= .10]    # turn all rel abundances to abs counts based on the smallest rel abundance value    x <- min(otu[otu!=0])        otu <- otu*10^(zeros_after_period(x) + 2)#
    otu <- as.data.frame(t(otu))
dim(otu0)
dim(otu)
otu <- t(otu0[,1:(ncol(otu0)-1)])    otu <- sweep(otu, 1, rowSums(otu), '/')
dim(otu)
prevalences <- apply(otu, 2, function(bug.col) mean(bug.col > 0))    otu <- otu[, prevalences >= .10]
dim(otu)
x <- min(otu[otu!=0])
x
otu <- otu*10^(zeros_after_period(x) + 2)#
    otu <- as.data.frame(t(otu))
otu[,"taxonomy"] <- taxonomy[rownames(otu)]
write.table(otu, outputfile,sep="/t",quote=F)
write.table(otu, outputfile,sep="\t",quote=F)
?cat
cat("\t", outputfile)    write.table(otu, outputfile,sep="\t",quote=F, append=T)
?write.table
cat("\t", outputfile)
cat("\t", file=outputfile)
cat("\t", file=outputfile)    write.table(otu, outputfile,sep="\t",quote=F, append=T)
cat("#OTU ID\t", file=outputfile)    write.table(otu, outputfile,sep="\t",quote=F, append=T)
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/convert.to.relative.abundance.r")
convert.to.relative.abundance("merged_otutable_s2_3000.txt", "final_otu.txt")
setwd("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.alphadiv.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.relative.distance.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/fraction.hits.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/load.data.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.b.p.ratio.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.group.distances.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.nutrients.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.alphadiv.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.pcoa.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.body.trends.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/predict.years.r")datadir <- "/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/data"otufn <- paste(datadir,"merged_otutable_s2_3000_L6.txt",sep="/")# load datawuf_dm <- read.table(paste(datadir, "weighted_unifrac_dm.txt",sep="/"), sep="\t", quote="", row=1, head=T)uwuf_dm <- read.table(paste(datadir,"unweighted_unifrac_dm.txt",sep="/"), sep="\t", quote="", row=1, head=T)#bc_dm <- read.table(paste(datadir,"bray_curtis_dm.txt",sep="/"), sep="\t", quote="", row=1, head=T)# let's try uwuf firstdm <- uwuf_dm#dm <- wuf_dmalphadiv0 <- read.table(paste(datadir,"alpha.txt",sep="/"), sep="\t", quote="", row=1, head=T, comment.char="")
ret <- load.data(mapfile=paste(datadir,"mapping.txt",sep="/"), otufile=otufn, normalize=F)map <- ret$maptaxa <- ret$otu# write out relative abundance OTU file out # only work with samples that are in both the mapping AND the dm/alpha filesvalid_samples <- intersect(rownames(dm), rownames(map))map <- map[valid_samples,]dm <- dm[valid_samples, valid_samples]# required: refactor BMI.Class to order by BMI instead of alphabeticalmap$BMI.Class <- factor(map$BMI.Class, levels=c("Normal", "Overweight", "Obese")) # include 1st sample of longitudinal samples in any CS analysescs_samples <- rownames(map)[is.na(map$Sample.Order) | map$Sample.Order==1]
otufn <- paste(datadir,"final_otu.txt",sep="/")
bc_dm <- read.table(paste(datadir,"bray_curtis_dm.txt",sep="/"), sep="\t", quote="", row=1, head=T)
ret <- load.data(mapfile=paste(datadir,"mapping.txt",sep="/"), otufile=otufn, normalize=F)map <- ret$maptaxa <- ret$otu# write out relative abundance OTU file out # only work with samples that are in both the mapping AND the dm/alpha filesvalid_samples <- intersect(rownames(dm), rownames(map))map <- map[valid_samples,]dm <- dm[valid_samples, valid_samples]# required: refactor BMI.Class to order by BMI instead of alphabeticalmap$BMI.Class <- factor(map$BMI.Class, levels=c("Normal", "Overweight", "Obese")) # include 1st sample of longitudinal samples in any CS analysescs_samples <- rownames(map)[is.na(map$Sample.Order) | map$Sample.Order==1]
otufn <- paste(datadir,"final_otu_L6.txt",sep="/")
ret <- load.data(mapfile=paste(datadir,"mapping.txt",sep="/"), otufile=otufn, normalize=F)map <- ret$maptaxa <- ret$otu# write out relative abundance OTU file out # only work with samples that are in both the mapping AND the dm/alpha filesvalid_samples <- intersect(rownames(dm), rownames(map))map <- map[valid_samples,]dm <- dm[valid_samples, valid_samples]# required: refactor BMI.Class to order by BMI instead of alphabeticalmap$BMI.Class <- factor(map$BMI.Class, levels=c("Normal", "Overweight", "Obese")) # include 1st sample of longitudinal samples in any CS analysescs_samples <- rownames(map)[is.na(map$Sample.Order) | map$Sample.Order==1]
plot.alphadiv(cbind(map[cs_samples,], alphadiv0[cs_samples,"PD_whole_tree"], stringsAsFactors=F))
plot.pcoa(map[cs_samples,], wuf_dm, "Weighted Unifrac")
plot.pcoa(map[cs_samples,], uwuf_dm, "Unweighted Unifrac")
plot.pcoa(map[cs_samples,], bc_dm, "Bray Curtis")
non_second_gen_cs <- rownames(map)[map$Sample.Group != "Hmong2nd" & (is.na(map$Sample.Order) | map$Sample.Order==1)]second_gen_cs <- rownames(map)[map$Sample.Group == "Hmong2nd"]plot.relative.distance(map=map, dm=uwuf_dm, query_samples=non_second_gen_cs, ref_samples=second_gen_cs, filename="relative_distance_uwuf.pdf")plot.relative.distance(map=map, dm=wuf_dm, query_samples=non_second_gen_cs, ref_samples=second_gen_cs, filename="relative_distance_wuf.pdf")
plot.b.p.ratio(map[cs_samples,], taxa[cs_samples,])
predict.years(map[cs_samples,], taxa[cs_samples,], n=1)
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/convert.to.relative.abundance.r")
convert.to.relative.abundance("merged_otutable_s2_3000.txt", "final_otu.txt")
setwd("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.alphadiv.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.relative.distance.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/fraction.hits.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/load.data.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.b.p.ratio.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.group.distances.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.nutrients.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.alphadiv.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.pcoa.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.body.trends.r")source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/predict.years.r")datadir <- "/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/data"otufn <- paste(datadir,"final_otu_L6.txt",sep="/")# load datawuf_dm <- read.table(paste(datadir, "weighted_unifrac_dm.txt",sep="/"), sep="\t", quote="", row=1, head=T)uwuf_dm <- read.table(paste(datadir,"unweighted_unifrac_dm.txt",sep="/"), sep="\t", quote="", row=1, head=T)bc_dm <- read.table(paste(datadir,"bray_curtis_dm.txt",sep="/"), sep="\t", quote="", row=1, head=T)# let's try uwuf firstdm <- uwuf_dm#dm <- wuf_dmalphadiv0 <- read.table(paste(datadir,"alpha.txt",sep="/"), sep="\t", quote="", row=1, head=T, comment.char="")# load mapping and otu/taxa file - automatically normalizes, filters, and merges ret <- load.data(mapfile=paste(datadir,"mapping.txt",sep="/"), otufile=otufn, normalize=F)map <- ret$maptaxa <- ret$otu# write out relative abundance OTU file out # only work with samples that are in both the mapping AND the dm/alpha filesvalid_samples <- intersect(rownames(dm), rownames(map))map <- map[valid_samples,]dm <- dm[valid_samples, valid_samples]# required: refactor BMI.Class to order by BMI instead of alphabeticalmap$BMI.Class <- factor(map$BMI.Class, levels=c("Normal", "Overweight", "Obese")) # include 1st sample of longitudinal samples in any CS analysescs_samples <- rownames(map)[is.na(map$Sample.Order) | map$Sample.Order==1]
plot.b.p.ratio(map[cs_samples,], taxa[cs_samples,])
plot.alphadiv(cbind(map[cs_samples,], alphadiv0[cs_samples,"PD_whole_tree"], stringsAsFactors=F))
plot.pcoa(map[cs_samples,], wuf_dm, "Weighted Unifrac")plot.pcoa(map[cs_samples,], uwuf_dm, "Unweighted Unifrac")plot.pcoa(map[cs_samples,], bc_dm, "Bray Curtis")
non_second_gen_cs <- rownames(map)[map$Sample.Group != "Hmong2nd" & (is.na(map$Sample.Order) | map$Sample.Order==1)]second_gen_cs <- rownames(map)[map$Sample.Group == "Hmong2nd"]plot.relative.distance(map=map, dm=uwuf_dm, query_samples=non_second_gen_cs, ref_samples=second_gen_cs, filename="relative_distance_uwuf.pdf")plot.relative.distance(map=map, dm=wuf_dm, query_samples=non_second_gen_cs, ref_samples=second_gen_cs, filename="relative_distance_wuf.pdf")
ret <- load.data(mapfile=paste(datadir,"mapping.txt",sep="/"), otufile=otufn, normalize=T)map <- ret$maptaxa <- ret$otu# write out relative abundance OTU file out # only work with samples that are in both the mapping AND the dm/alpha filesvalid_samples <- intersect(rownames(dm), rownames(map))map <- map[valid_samples,]dm <- dm[valid_samples, valid_samples]# required: refactor BMI.Class to order by BMI instead of alphabeticalmap$BMI.Class <- factor(map$BMI.Class, levels=c("Normal", "Overweight", "Obese")) # include 1st sample of longitudinal samples in any CS analysescs_samples <- rownames(map)[is.na(map$Sample.Order) | map$Sample.Order==1]
plot.b.p.ratio(map[cs_samples,], taxa[cs_samples,])
asin(sqrt(.2))
asin(sqrt(.1))
ret <- load.data(mapfile=paste(datadir,"mapping.txt",sep="/"), otufile=otufn, normalize=F)map <- ret$maptaxa <- ret$otu
plot.b.p.ratio(map[cs_samples,], taxa[cs_samples,])
dim(taxa)
predict.years(map[cs_samples,], taxa[cs_samples,], n=1)
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/predict.years.r")
predict.years(map[cs_samples,], taxa[cs_samples,], n=1)
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/predict.years.r")
prediction <- predict.years(map[cs_samples,], taxa[cs_samples,], n=1)
prediction
plot(prediction$predicted, prediction$y, col=alpha("black",.5))
cs_samples[40]
map[cs_samples,"Years.in.US"]
map[non_second_gen_cs,"Years.in.US"]
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/predict.years.r")
prediction <- predict.years(map[non_second_gen_cs,], taxa[non_second_gen_cs,], n=1)
plot.relative.longitudinal(map = map[map$Sub.Study == "L" & map$Subject.ID != "IMP.000",], dm=wuf_dm,                        ref.sample = 6, xlab="Month in the US", outputfn="relative_L_wuf.pdf")plot.relative.longitudinal(map = map[map$Sub.Study == "L" & map$Subject.ID != "IMP.000",], dm=bc_dm,                        ref.sample = 6, xlab="Month in the US", outputfn="relative_L_bc.pdf")# plot relative distance to selfplot.relative.longitudinal(map = map[map$Subject.ID == "IMP.000",], dm=uwuf_dm,                        ref.sample.order = 21, xlab="Day", outputfn="relative_self_uwuf.pdf")plot.relative.longitudinal(map = map[map$Subject.ID == "IMP.000",], dm=wuf_dm,                        ref.sample.order = 21, xlab="Day", outputfn="relative_self_wuf.pdf")plot.relative.longitudinal(map = map[map$Subject.ID == "IMP.000",], dm=bc_dm,                        ref.sample.order = 21, xlab="Day", outputfn="relative_self_bc.pdf")
plot.relative.longitudinal(map = map[map$Subject.ID == "IMP.000",], dm=uwuf_dm,                        ref.sample.order = 1, xlab="Day", outputfn="relative_self_uwuf.pdf")plot.relative.longitudinal(map = map[map$Subject.ID == "IMP.000",], dm=wuf_dm,                        ref.sample.order = 1, xlab="Day", outputfn="relative_self_wuf.pdf")plot.relative.longitudinal(map = map[map$Subject.ID == "IMP.000",], dm=bc_dm,                        ref.sample.order = 1, xlab="Day", outputfn="relative_self_bc.pdf")
plot.relative.longitudinal(map = map[map$Sub.Study == "L" & map$Subject.ID != "IMP.000",], dm=uwuf_dm,                        ref_samples.order = 1, xlab="Month in the US", outputfn="Long_to_Thai_uwuf.pdf",                        ref_samples=rownames(map)[map$Sample.Group == "KarenThai"])plot.relative.longitudinal(map = map[map$Sub.Study == "L" & map$Subject.ID != "IMP.000",], dm=wuf_dm,                        ref.sample.order = 1, xlab="Month in the US", outputfn="Long_to_Thai_wuf.pdf",                        ref_samples=rownames(map)[map$Sample.Group == "KarenThai"])plot.relative.longitudinal(map = map[map$Sub.Study == "L" & map$Subject.ID != "IMP.000",], dm=bc_dm,                        ref.sample.order = 1, xlab="Month in the US", outputfn="Long_to_Thai_bc.pdf",                        ref_samples=rownames(map)[map$Sample.Group == "KarenThai"])
prediction
unique(map$Sample.Group)
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/predict.years.r")
prediction_karen <- predict.years(map[map$Ethnicity=="Karen" & (is.na(map$Sample.Order) | map$Sample.Order==1),], taxa)
karen_firstgen_cs <- rownames(map)[map$Ethnicity=="Karen" & (is.na(map$Sample.Order) | map$Sample.Order==1)]karenthai <- rownames(map)[map$Sample.Group=="KarenThai"]
prediction_karen
map[map$Ethnicity=="Karen" & map$Years.in.US > 9,]
prediction_karen
prediction_hmong <- predict.years(map[map$Ethnicity=="Hmong" & map$Subject.ID != "IMP.000",], taxa)
prediction_hmong
map[map$Ethnicity=="Hmong" & map$Subject.ID != "IMP.000","Years.in.US"]
map[map$Ethnicity=="Hmong" & map$Subject.ID != "IMP.000","Years.in.US",drop=F]
prediction_hmong <- predict.years(map[map$Ethnicity=="Hmong" & map$Subject.ID != "IMP.000" & map$Sample.Group=="Hmong1st",], taxa)
prediction_hmong <- predict.years(map[map$Ethnicity=="Hmong" & map$Subject.ID != "IMP.000" & map$Sample.Group !="Hmong2nd",], taxa)
prediction_hmong
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.relative.distance.r")
pdf("Karen_CS_to_Thai.pdf",useDingbats=F)    par(mfrow=c(1,3))    plot.relative.CS(map=map, dm=uwuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_uwuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=wuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_wuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=bc_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_bc.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    dev.off()
?pdf
pdf("Karen_CS_to_Thai.pdf",useDingbats=F, width=7, height=3.5)    par(mfrow=c(1,3))    plot.relative.CS(map=map, dm=uwuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_uwuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=wuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_wuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=bc_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_bc.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    dev.off()
pdf("Karen_CS_to_Thai.pdf",useDingbats=F, width=7, height=3)    par(mfrow=c(1,3))    plot.relative.CS(map=map, dm=uwuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_uwuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=wuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_wuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=bc_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_bc.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    dev.off()
pdf("Karen_CS_to_Thai.pdf",useDingbats=F, width=7, height=2)    par(mfrow=c(1,3))    plot.relative.CS(map=map, dm=uwuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_uwuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=wuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_wuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=bc_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_bc.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    dev.off()
pdf("Karen_CS_to_Thai.pdf",useDingbats=F, width=7, height=2.5)    par(mfrow=c(1,3))    plot.relative.CS(map=map, dm=uwuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_uwuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=wuf_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_wuf.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    plot.relative.CS(map=map, dm=bc_dm, query_samples=karen_firstgen_cs, ref_samples=karenthai, filename="karen_relative_distance_bc.pdf", ylab="Distance to Karen in Thailand",saveplot=F)    dev.off()
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.relative.distance.r")
pdf("Karen_CS_to_Thai.pdf",useDingbats=F, width=7, height=2.5)    par(mfrow=c(1,3))    ylab <- "Distance to Karen in Thailand"    plot.relative.CS(map=map, dm=uwuf_dm, main="Unweighted Unifrac", query_samples=karen_firstgen_cs, ref_samples=karenthai, ylab=ylab,saveplot=F)    plot.relative.CS(map=map, dm=wuf_dm, main="Weighted Unifrac", query_samples=karen_firstgen_cs, ref_samples=karenthai, ylab=ylab,saveplot=F)    plot.relative.CS(map=map, dm=bc_dm, main="Bray Curtis", query_samples=karen_firstgen_cs, ref_samples=karenthai, ylab=ylab,saveplot=F)    dev.off()
source("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/analysis/lib/plot.relative.distance.r")
pdf("Karen_CS_to_Thai.pdf",useDingbats=F, width=7, height=2.5)    par(mfrow=c(1,3))    ylab <- "Distance to Karen in Thailand"    plot.relative.CS(map=map, dm=uwuf_dm, main="Unweighted Unifrac", query_samples=karen_firstgen_cs, ref_samples=karenthai, ylab=ylab,saveplot=F)    plot.relative.CS(map=map, dm=wuf_dm, main="Weighted Unifrac", query_samples=karen_firstgen_cs, ref_samples=karenthai, ylab=ylab,saveplot=F)    plot.relative.CS(map=map, dm=bc_dm, main="Bray Curtis", query_samples=karen_firstgen_cs, ref_samples=karenthai, ylab=ylab,saveplot=F)    dev.off()
